// Code generated by 'yaegi extract gameserver/internal/code'. DO NOT EDIT.

//go:build go1.22
// +build go1.22

package symbols

import (
	"gameserver/internal/code"
	"reflect"
)

func init() {
	Symbols["gameserver/internal/code/code"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AccountAuthFail":          reflect.ValueOf(&code.AccountAuthFail).Elem(),
		"AccountBindFail":          reflect.ValueOf(&code.AccountBindFail).Elem(),
		"AccountGetFail":           reflect.ValueOf(&code.AccountGetFail).Elem(),
		"AccountNameIsExist":       reflect.ValueOf(&code.AccountNameIsExist).Elem(),
		"AccountRegisterError":     reflect.ValueOf(&code.AccountRegisterError).Elem(),
		"AccountTokenValidateFail": reflect.ValueOf(&code.AccountTokenValidateFail).Elem(),
		"Add":                      reflect.ValueOf(code.Add),
		"AddAll":                   reflect.ValueOf(code.AddAll),
		"Error":                    reflect.ValueOf(&code.Error).Elem(),
		"GetMessage":               reflect.ValueOf(code.GetMessage),
		"IsFail":                   reflect.ValueOf(code.IsFail),
		"IsOK":                     reflect.ValueOf(code.IsOK),
		"LoginError":               reflect.ValueOf(&code.LoginError).Elem(),
		"NewDataResult":            reflect.ValueOf(code.NewDataResult),
		"OK":                       reflect.ValueOf(&code.OK).Elem(),
		"PIDError":                 reflect.ValueOf(&code.PIDError).Elem(),
		"PlayerCreateFail":         reflect.ValueOf(&code.PlayerCreateFail).Elem(),
		"PlayerDenyLogin":          reflect.ValueOf(&code.PlayerDenyLogin).Elem(),
		"PlayerDuplicateLogin":     reflect.ValueOf(&code.PlayerDuplicateLogin).Elem(),
		"PlayerIdError":            reflect.ValueOf(&code.PlayerIdError).Elem(),
		"PlayerNameExist":          reflect.ValueOf(&code.PlayerNameExist).Elem(),
		"PlayerNotLogin":           reflect.ValueOf(&code.PlayerNotLogin).Elem(),
		"RenderResult":             reflect.ValueOf(code.RenderResult),

		// type definitions
		"Result": reflect.ValueOf((*code.Result)(nil)),
	}
}

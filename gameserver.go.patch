package gameserver

import (
	"fmt"
	cstring "gameserver/cherry/extend/string"
	cproto "gameserver/cherry/net/proto"
	"gameserver/hotfix"
	"gameserver/internal/code"
	"gameserver/internal/pb"
	"gameserver/nodes/game/db"
	"gameserver/internal/event"
	"gameserver/nodes/game/module/online"
	"gameserver/nodes/game/module/player"
	"reflect"
)

func GetPatch() *hotfix.FuncPatch {
	fmt.Println("[Patch] invoke GetPatch()")

	fn := func(p *player.ActorPlayer, session *cproto.Session, req *pb.Int64) {
		playerId := req.Value
		if playerId < 1 {
			p.ResponseCode(session, code.PlayerIdError)
			return
		}

		// 检查并查找该用户下的该角色
		playerTable := db.PlayerRepository.Get(playerId)
		if playerTable == nil {
			p.ResponseCode(session, code.PlayerIdError)
			return
		}

		// 保存进入游戏的玩家对应的agentPath
		online.BindPlayer(playerId, session.AgentPath)

		// 设置网关节点session的PlayerID属性
		p.Call(session.ActorPath(), "setSession", &pb.StringKeyValue{
			Key:   "player_id",
			Value: cstring.ToString(playerId),
		})

		p.Id = playerTable.ID
		p.IsOnline = true // 设置为在线状态

		// 这里改为客户端主动请求更佳
		// [01]推送角色 道具数据
		//module.Item.ListPush(session, playerId)
		// [02]推送角色 英雄数据
		//module.Hero.ListPush(session, playerId)
		// [03]推送角色 成就数据
		//module.Achieve.CheckNewAndPush(playerId, true, true)
		// [04]推送角色 邮件数据
		//module.Mail.ListPush(session, playerId)

		// [99]最后推送 角色进入游戏响应结果
		response := &pb.PlayerEnterResponse{}
		response.GuideMaps = map[int32]int32{}

		p.Response(session, response)
		fmt.Println("enter end")
		// 角色登录事件
		loginEvent := event.NewPlayerLogin(p.ActorID(), playerId)
        	p.PostEvent(&loginEvent)
		return
	}

	fmt.Println("[Patch] invoke GetPatch() end")
	return &hotfix.FuncPatch{
		StructType: reflect.TypeOf(&player.ActorPlayer{}),
		FuncName:   "PlayerEnter",
		FuncValue:  reflect.ValueOf(fn),
	}
}
